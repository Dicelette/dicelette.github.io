"use strict";(self.webpackChunkdicelette_docs=self.webpackChunkdicelette_docs||[]).push([[82],{4035:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var s=t(3274),o=t(1377);const i={title:"Slashcommands"},c="Rolling Dice",d={id:"introduction/Usage/slashcommands",title:"Slashcommands",description:'Use /roll 1d20 to roll a die. You can also use "semi-direct" notation by adding a comment: /roll 1d20 My comment. Please note that "indirect" notation is not available in this mode.',source:"@site/i18n/en/docusaurus-plugin-content-docs/current/introduction/Usage/slashcommands.md",sourceDirName:"introduction/Usage",slug:"/introduction/Usage/slashcommands",permalink:"/en/docs/introduction/Usage/slashcommands",draft:!1,unlisted:!1,editUrl:"https://github.com/Dicelette/docs/tree/main/docs/introduction/Usage/slashcommands.md",tags:[],version:"current",frontMatter:{title:"Slashcommands"},sidebar:"introduction",previous:{title:"Sending message",permalink:"/en/docs/introduction/Usage/message"}},a={},l=[{value:"Logs",id:"logs",level:2}];function r(e){const n={code:"code",h1:"h1",h2:"h2",img:"img",p:"p",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"rolling-dice",children:"Rolling Dice"}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"/roll 1d20"}),' to roll a die. You can also use "semi-direct" notation by adding a comment: ',(0,s.jsx)(n.code,{children:"/roll 1d20 My comment"}),'. Please note that "indirect" notation is not available in this mode.']}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Roll",src:t(6765).A+"",width:"1369",height:"488"})}),"\n",(0,s.jsx)(n.h1,{id:"creating-a-new-scene",children:"Creating a New Scene"}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"/scene <name>"})," to create a new scene. The bot will then create a new thread, prefixed with ",(0,s.jsx)(n.code,{children:"\ud83c\udfb2"}),", where it will send the log. This thread will be named after the ",(0,s.jsx)(n.code,{children:"scene"}),", and all other threads prefixed with ",(0,s.jsx)(n.code,{children:"\ud83c\udfb2"})," will be archived."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Scene",src:t(5469).A+"",width:"1595",height:"517"})}),"\n",(0,s.jsx)(n.h1,{id:"help",children:"Help"}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"/help"})," to display the help message."]}),"\n",(0,s.jsx)(n.h2,{id:"logs",children:"Logs"}),"\n",(0,s.jsx)(n.p,{children:"This command allows configuring a channel to receive all bot error logs."}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"/logs <channel>"})," to configure the log channel."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}},5469:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/scene-ddd51624fefa6a070d1834384032231d.gif"},6765:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/slash-commands-ecebd48fa903f7f68b540e5b260b96b6.gif"},1377:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>d});var s=t(9474);const o={},i=s.createContext(o);function c(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);