"use strict";(self.webpackChunkdicelette_docs=self.webpackChunkdicelette_docs||[]).push([[82],{89957:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>a});var t=s(13274),i=s(42463);const o={title:"Slashcommands"},c=void 0,l={id:"introduction/Usage/slashcommands",title:"Slashcommands",description:"Rolling Dice",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/introduction/Usage/slashcommands.md",sourceDirName:"introduction/Usage",slug:"/introduction/Usage/slashcommands",permalink:"/en/docs/introduction/Usage/slashcommands",draft:!1,unlisted:!1,editUrl:"https://github.com/Dicelette/docs/tree/main/docs/introduction/Usage/slashcommands.md",tags:[],version:"current",frontMatter:{title:"Slashcommands"},sidebar:"introduction",previous:{title:"Sending message",permalink:"/en/docs/introduction/Usage/message"}},d={},a=[{value:"Rolling Dice",id:"rolling-dice",level:2},{value:"Creating a New Scene",id:"creating-a-new-scene",level:2},{value:"Help",id:"help",level:2},{value:"Logs",id:"logs",level:2}];function r(e){const n={code:"code",h2:"h2",img:"img",p:"p",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"rolling-dice",children:"Rolling Dice"}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.code,{children:"/roll 1d20"}),' to roll a die. You can also use "semi-direct" notation by adding a comment: ',(0,t.jsx)(n.code,{children:"/roll 1d20 My comment"}),'. Please note that "indirect" notation is not available in this mode.']}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Roll",src:s(6765).A+"",width:"1369",height:"488"})}),"\n",(0,t.jsx)(n.h2,{id:"creating-a-new-scene",children:"Creating a New Scene"}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.code,{children:"/scene <name>"})," to create a new scene. The bot will then create a new thread, prefixed with ",(0,t.jsx)(n.code,{children:"\ud83c\udfb2"}),", where it will send the log. This thread will be named after the ",(0,t.jsx)(n.code,{children:"scene"}),", and all other threads prefixed with ",(0,t.jsx)(n.code,{children:"\ud83c\udfb2"})," will be archived."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Scene",src:s(45469).A+"",width:"1595",height:"517"})}),"\n",(0,t.jsx)(n.h2,{id:"help",children:"Help"}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.code,{children:"/help"})," to display the help message."]}),"\n",(0,t.jsx)(n.h2,{id:"logs",children:"Logs"}),"\n",(0,t.jsx)(n.p,{children:"This command allows configuring a channel to receive all bot error logs."}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.code,{children:"/logs <channel>"})," to configure the log channel."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(r,{...e})}):r(e)}},45469:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/scene-ddd51624fefa6a070d1834384032231d.gif"},6765:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/slash-commands-ecebd48fa903f7f68b540e5b260b96b6.gif"},42463:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>l});var t=s(79474);const i={},o=t.createContext(i);function c(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);